
import java.io.*;
import java.util.*;

public class Main {

    static int[] arr, l_dp, r_dp;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        int n = Integer.parseInt(br.readLine());
        StringTokenizer st = new StringTokenizer(br.readLine());

        arr = new int[n];
        l_dp = new int[n];
        r_dp = new int[n];

        for (int i = 0; i < n; i++) {
            arr[i] = Integer.parseInt(st.nextToken());
        }

        Arrays.fill(l_dp, 1);
        Arrays.fill(r_dp, 1);

        LIS(n);
        LDS(n);

        int res = 0;
        for (int i = 0; i < n; i++) {
            if (res < l_dp[i] + r_dp[i]) {
                res = l_dp[i] + r_dp[i];
            }
        }

        bw.write(String.valueOf(res - 1));
        bw.flush();
        br.close();
        bw.close();
    }

    public static void LIS(int n) {
        // 계산
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (arr[j] < arr[i] && l_dp[j] + 1 > l_dp[i]) {
                    l_dp[i] = l_dp[j] + 1;
                }
            }
        }
    }

    public static void LDS(int n) {
        int res = 0;
        for (int i = n - 1; i >= 0; i--) {
            for (int j = n - 1; j > i; j--) {
                if (arr[j] < arr[i] && r_dp[j] + 1 > r_dp[i]) {
                    r_dp[i] = r_dp[j] + 1;
                }
            }
        }
    }
}
